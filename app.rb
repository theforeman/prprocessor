require 'sinatra'
require 'json'
require 'openssl'
require 'yaml'

require File.join(File.dirname(__FILE__), 'redmine/issue')
require File.join(File.dirname(__FILE__), 'redmine/project')
require File.join(File.dirname(__FILE__), 'github/pull_request')
require File.join(File.dirname(__FILE__), 'github/status')
require File.join(File.dirname(__FILE__), 'jenkins')


post '/pull_request' do
  actions = {}

  request.body.rewind
  payload_body = request.body.read
  verify_signature(payload_body)

  halt unless ['pull_request', 'pull_request_review_comment'].include?(request.env['HTTP_X_GITHUB_EVENT'])

  payload = JSON.parse(payload_body)
  raise "unknown repo" unless payload['repository'] && (repo = payload['repository']['name'])

  pull_request = PullRequest.new(payload['pull_request'])
  pr_number = pull_request.raw_data['number']
  pr_action = payload['action']

  halt if ['closed', 'labeled', 'unlabeled'].include?(pr_action)
  # also trigger for new PullRequestReviewCommentEvent containing [test]
  halt if pr_action == 'created' && (!payload['comment'] || !payload['comment']['body'].include?('[test]'))

  if ENV['REDMINE_API_KEY']

    pull_request.issue_numbers.each do |issue_number|
      issue = Issue.new(issue_number)
      project = Project.new(issue.project)
      current_version = project.current_version

      users = YAML.load_file('config/users.yaml')
      user_id = users[pull_request.author] if users.key?(pull_request.author)

      unless issue.rejected?
        issue.set_version(current_version['id']) if issue.version.nil? && current_version
        issue.add_pull_request(pull_request.raw_data['html_url'])
        issue.set_status(Issue::READY_FOR_TESTING) unless issue.closed?
        issue.set_assigned(user_id) unless user_id.nil? || user_id.empty? || issue.assigned_to
        issue.save!

        actions['redmine'] = true
      end
    end
  end

  if ENV['GITHUB_OAUTH_TOKEN']
    if pr_action == 'synchronize' && pull_request.waiting_for_contributor?
      if pull_request.not_yet_reviewed?
        pull_request.replace_labels(['Waiting on contributor'], ['Needs testing'])
      else
        pull_request.replace_labels(['Waiting on contributor'], ['Needs testing', 'Needs re-review'])
      end
    end

    pull_request.check_commits_style if redmine_issue_repos.include?(pull_request.repo) && pr_action != 'created'

    pull_request.labels = ["Needs testing", "Not yet reviewed"] if pr_action == 'opened'
    if pull_request.dirty?
      message = <<EOM
@#{pull_request.author}, this pull request is currently not mergeable. Please rebase against the #{pull_request.target_branch} branch and push again.

If you have a remote called 'upstream' that points to this repository, you can do this by running:

```
    $ git pull --rebase upstream #{pull_request.target_branch}
```

---------------------------------------
This message was auto-generated by Foreman's [prprocessor](http://projects.theforeman.org/projects/foreman/wiki/PrProcessor)
EOM
      pull_request.replace_labels(['Needs testing', 'Needs re-review', 'Not yet reviewed'], ['Waiting on contributor'])
      pull_request.add_comment(message)
    end

    actions['github'] = true
  end

  if ENV['JENKINS_TOKEN'] && !pull_request.labels.include?("Work In Progress")
    jenkins = Jenkins.new
    jenkins.build(repo, pr_number)
    actions['jenkins'] = true
  end

  actions.to_json
end

get '/status' do
  locals = {}
  locals[:jenkins_token] = ENV['JENKINS_TOKEN'] ? true : false
  locals[:github_secret] = ENV['GITHUB_SECRET_TOKEN'] ? true : false
  locals[:redmine_key] = ENV['REDMINE_API_KEY'] ? true : false
  locals[:github_oauth_token] = ENV['GITHUB_OAUTH_TOKEN'] ? true : false
  locals[:redmine_issue_repos] = redmine_issue_repos
  locals[:rate_limit] = Status.new.rate_limit

  erb :status, :locals => locals
end

def verify_signature(payload_body)
  signature = 'sha1=' + OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha1'), ENV['GITHUB_SECRET_TOKEN'], payload_body)
  return halt 500, "Signatures didn't match!" unless Rack::Utils.secure_compare(signature, request.env['HTTP_X_HUB_SIGNATURE'])
end

def redmine_issue_repos
  YAML.load_file('config/redmine_issue_required_repos.yaml')
end
